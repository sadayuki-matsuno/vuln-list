{
  "description": "Linux kernel: Exploitable memory corruption due to UFO to non-UFO path switch. When building a UFO packet with MSG_MORE __ip_append_data() calls ip_ufo_append_data() to append. However in between two send() calls, the append path can be switched from UFO to non-UFO one, which leads to a memory corruption. In case UFO packet lengths exceeds MTU, copy = maxfraglen - skb-\u003elen becomes negative on the non-UFO path and the branch to allocate new skb is taken. This triggers fragmentation and computation of fraggap = skb_prev-\u003elen - maxfraglen. Fraggap can exceed MTU, causing copy = datalen - transhdrlen - fraggap to become negative. Subsequently skb_copy_and_csum_bits() writes out-of-bounds. A similar issue is present in IPv6 code. The bug was introduced in e89e9cf539a2 (\"[IPv4/IPv6]: UFO Scatter-gather approach\") on Oct 18 2005.",
  "releases": {
    "bullseye": {
      "fixed_version": "4.12.6-1",
      "repositories": {
        "bullseye": "5.2.9-2"
      },
      "status": "resolved",
      "urgency": "low"
    },
    "buster": {
      "fixed_version": "4.12.6-1",
      "repositories": {
        "buster": "4.19.37-5",
        "buster-security": "4.19.37-5+deb10u2"
      },
      "status": "resolved",
      "urgency": "low"
    },
    "jessie": {
      "fixed_version": "3.16.43-2+deb8u5",
      "repositories": {
        "jessie": "3.16.56-1+deb8u1",
        "jessie-security": "3.16.72-1"
      },
      "status": "resolved",
      "urgency": "medium**"
    },
    "sid": {
      "fixed_version": "4.12.6-1",
      "repositories": {
        "sid": "5.2.9-2"
      },
      "status": "resolved",
      "urgency": "low"
    },
    "stretch": {
      "fixed_version": "4.9.30-2+deb9u5",
      "repositories": {
        "stretch": "4.9.168-1",
        "stretch-security": "4.9.168-1+deb9u5"
      },
      "status": "resolved",
      "urgency": "medium**"
    }
  },
  "scope": "local"
}