{
  "description": "A race condition in perf_event_open() allows local attackers to leak sensitive data from setuid programs. As no relevant locks (in particular the cred_guard_mutex) are held during the ptrace_may_access() call, it is possible for the specified target task to perform an execve() syscall with setuid execution before perf_event_alloc() actually attaches to it, allowing an attacker to bypass the ptrace_may_access() check and the perf_event_exit_task(current) call that is performed in install_exec_creds() during privileged execve() calls. This issue affects kernel versions before 4.8.",
  "releases": {
    "bullseye": {
      "fixed_version": "4.6.1-1",
      "repositories": {
        "bullseye": "5.2.9-2"
      },
      "status": "resolved",
      "urgency": "low**"
    },
    "buster": {
      "fixed_version": "4.6.1-1",
      "repositories": {
        "buster": "4.19.37-5",
        "buster-security": "4.19.37-5+deb10u2"
      },
      "status": "resolved",
      "urgency": "low**"
    },
    "jessie": {
      "fixed_version": "3.16.68-1",
      "repositories": {
        "jessie": "3.16.56-1+deb8u1",
        "jessie-security": "3.16.72-1"
      },
      "status": "resolved",
      "urgency": "low**"
    },
    "sid": {
      "fixed_version": "4.6.1-1",
      "repositories": {
        "sid": "5.2.9-2"
      },
      "status": "resolved",
      "urgency": "low**"
    },
    "stretch": {
      "fixed_version": "4.6.1-1",
      "repositories": {
        "stretch": "4.9.168-1",
        "stretch-security": "4.9.168-1+deb9u5"
      },
      "status": "resolved",
      "urgency": "low**"
    }
  },
  "scope": "local"
}